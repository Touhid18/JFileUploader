/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.touhiDroid.JFileUploader.Client;

import java.io.File;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.touhiDroid.JFileUploader.Interfaces.UploadListener;
import com.touhiDroid.JFileUploader.Utils.Utils;
import com.touhiDroid.JFileUploader.models.ServerConstraint;

/**
 * 
 * @author Touhid
 */
public class ClientGUI extends javax.swing.JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3697926905671834773L;

	private UploadListener uploadListener;
	private String serverURL;
	private int serverPort;
	private ServerConstraint sc;

	/**
	 * Creates new form ClientGUI
	 */
	public ClientGUI(UploadListener uListener) {
		getNimbusLookAndFeel();
		initComponents();
		jPanel1.setVisible(false);
		uploadListener = uListener;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jLabel1 = new javax.swing.JLabel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextPane1 = new javax.swing.JTextPane();
		jLabel2 = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextPane2 = new javax.swing.JTextPane();
		jButton1 = new javax.swing.JButton();
		jPanel1 = new javax.swing.JPanel();
		jSeparator1 = new javax.swing.JSeparator();
		jFileChooser2 = new javax.swing.JFileChooser();
		jButton2 = new javax.swing.JButton();
		jSeparator2 = new javax.swing.JSeparator();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextPane3 = new javax.swing.JTextPane();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jLabel1.setText("Server URL:");

		jScrollPane1.setViewportView(jTextPane1);

		jLabel2.setText("Server Port:");

		jScrollPane2.setViewportView(jTextPane2);

		jButton1.setText("Connect To Server & Get Constraints");
		jButton1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton1ActionPerformed(evt);
			}
		});

		jButton2.setText("Upload");
		jButton2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				jButton2ActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel1Layout.createSequentialGroup()
								.addGap(680, 680, 680)
								.addComponent(jSeparator1))
				.addGroup(
						jPanel1Layout
								.createSequentialGroup()
								.addComponent(jFileChooser2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										674,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap())
				.addGroup(
						jPanel1Layout.createSequentialGroup()
								.addGap(300, 300, 300).addComponent(jButton2)
								.addGap(0, 0, Short.MAX_VALUE)));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jSeparator1,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																10,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jFileChooser2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				298,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jButton2)
										.addContainerGap()));

		jLabel3.setText("Waiting to connect ...");

		jLabel4.setText("Student ID:");

		jScrollPane3.setViewportView(jTextPane3);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(
														jPanel1,
														javax.swing.GroupLayout.Alignment.TRAILING,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel1)
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(
																		jScrollPane1))
												.addComponent(
														jButton1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE)
												.addComponent(jSeparator2)
												.addGroup(
														layout.createSequentialGroup()
																.addComponent(
																		jLabel3)
																.addGap(0,
																		0,
																		Short.MAX_VALUE))
												.addGroup(
														layout.createSequentialGroup()
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						jLabel2)
																				.addComponent(
																						jLabel4))
																.addPreferredGap(
																		javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addGroup(
																		layout.createParallelGroup(
																				javax.swing.GroupLayout.Alignment.LEADING)
																				.addComponent(
																						jScrollPane3)
																				.addComponent(
																						jScrollPane2))))
								.addContainerGap()));
		layout.setVerticalGroup(layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						layout.createSequentialGroup()
								.addContainerGap()
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														jScrollPane1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														23, Short.MAX_VALUE)
												.addComponent(
														jLabel1,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addGap(18, 18, 18)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														jScrollPane2,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														23, Short.MAX_VALUE)
												.addComponent(
														jLabel2,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addGap(6, 6, 6)
								.addGroup(
										layout.createParallelGroup(
												javax.swing.GroupLayout.Alignment.LEADING,
												false)
												.addComponent(
														jScrollPane3,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														23, Short.MAX_VALUE)
												.addComponent(
														jLabel4,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														javax.swing.GroupLayout.DEFAULT_SIZE,
														Short.MAX_VALUE))
								.addGap(18, 18, 18)
								.addComponent(jButton1)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(jPanel1,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jSeparator2,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										2,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(
										javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jLabel3).addGap(14, 14, 14)));

		pack();
	}// </editor-fold>

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO upload according to constraints
		File[] f = new File[sc.getMaxNoFiles()];
		if (sc.isMultiFiles() && jFileChooser2.isMultiSelectionEnabled()) {
			System.out.println("ClientGUI :: Handling multiple files");
			if (jFileChooser2.getSelectedFiles().length > sc.getMaxNoFiles()) {
				Utils.showErrorMessage("You have exceeded max. no. ("
						+ sc.getMaxNoFiles() + ") of file selection!"
						+ "\nPlease select less files & try again.");
				return;
			}
			f = jFileChooser2.getSelectedFiles();
		} else {
			System.out.println("Handling single file/folder");
			f = new File[] { jFileChooser2.getSelectedFile() };
		}
		uploadListener.startUpload(f, "", Utils.DEFAULT_PORT);

	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO connect & get constraints
		serverURL = jTextPane1.getText();
		if (serverURL.equals(null) || serverURL.length() == 0)
			serverURL = Utils.DEFAULT_SERVER;
		try {
			serverPort = Integer.parseInt(jTextPane2.getText());
		} catch (NumberFormatException nfe) {
			jLabel3.setText("Default port (5018) is being set.");
			serverPort = Utils.DEFAULT_PORT;
		}
		uploadListener.connectAndGetServerConstraints(serverURL, serverPort);
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		getNimbusLookAndFeel();

		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new ClientGUI(new UploadListener() {
					@Override
					public void startUpload(File[] f, String serverAddress,
							int serverPort) {
					}

					@Override
					public void connectAndGetServerConstraints(
							String serverAddress, int serverPort) {
					}
				}).setVisible(true);
			}
		});
	}

	private static void getNimbusLookAndFeel() {
		/*
		 * Set the Nimbus look and feel
		 */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ClientGUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
	}

	// Variables declaration - do not modify
	private javax.swing.JButton jButton1;
	private javax.swing.JButton jButton2;
	private javax.swing.JFileChooser jFileChooser2;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JTextPane jTextPane1;
	private javax.swing.JTextPane jTextPane2;
	private javax.swing.JTextPane jTextPane3;

	// End of variables declaration

	public void writeMessage(String message) {
		jLabel3.setText(message);
	}

	public void setBrowserVisible(boolean b) {
		jPanel1.setVisible(true);
	}

	public long getStudentID() {
		String id = jTextPane3.getText();
		if (id.equals(null) || id.length() == 0)
			id = "0";
		return Long.parseLong(id);
	}

	public void resetFileChooser(ServerConstraint sc) {
		this.sc = sc;
		String fileTypes = sc.getFileTypes();
		// int mode = Utils.MODE_SINGLE_FILE;
		// if (sc.isFolder())
		// mode = Utils.MODE_FILE_FOLDER;
		// else if (sc.isMultiFiles())
		// mode = Utils.MODE_MULTIPLE_FILES;

		ArrayList<String> ftList = ServerConstraint.parseFileTypes(fileTypes);
		for (String s : ftList)
			jFileChooser2.addChoosableFileFilter(new FileNameExtensionFilter(
					null, s));
		jFileChooser2.setAcceptAllFileFilterUsed(true);

		if (sc.isMultiFiles() && sc.isFolder()) {
			jFileChooser2
					.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
			jFileChooser2.setMultiSelectionEnabled(true);
		} else if (sc.isFolder())
			jFileChooser2
					.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		else if (sc.isMultiFiles()) {
			jFileChooser2.setMultiSelectionEnabled(true);
		} else
			jFileChooser2.setFileSelectionMode(JFileChooser.FILES_ONLY);
	}
}
